name: Î∞±ÏóîÎìú CI ÌÖåÏä§Ìä∏

on:
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: .

    permissions: write-all

    steps:
      - name: Ï†ÄÏû•ÏÜå Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.SECRETS_SUBMODULE_ACCESS_TOKEN }}

      - name: JDK 21 ÏÑ§Ï†ï
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: gradlew Ïã§Ìñâ Í∂åÌïú Î∂ÄÏó¨
        run: chmod +x gradlew

      - name: ÌîÑÎ°úÏ†ùÌä∏ ÌÅ¥Î¶∞
        run: ./gradlew clean

      - name: Îã®ÏúÑ ÌÖåÏä§Ìä∏ Î∞è Ïª§Î≤ÑÎ¶¨ÏßÄ Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
        run: ./gradlew test jacocoTestReport

      - name: ÎπåÎìú Ïã§Ìñâ
        run: ./gradlew build

      - name: ÌÖåÏä§Ìä∏ Í≤∞Í≥º Í≤åÏãú
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: ${{ github.workspace }}/build/test-results/**/*.xml

      - name: Jacoco ÌÖåÏä§Ìä∏ Ïª§Î≤ÑÎ¶¨ÏßÄ Î¶¨Ìè¨Ìä∏(PR Î∞òÏòÅ)
        id: jacoco
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 50
          min-coverage-changed-files: 50
          title: "üåª ÌÖåÏä§Ìä∏ Ïª§Î≤ÑÎ¶¨ÏßÄ Î¶¨Ìè¨Ìä∏"
          update-comment: true

      - name: Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
        run: |
          docker build -t myapp:test -f Dockerfile.prod .

      - name: PostgreSQL Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
        run: |
          docker run -d --name postgres_prod \
            -e POSTGRES_DB=globber \
            -e POSTGRES_USER=globber \
            -e POSTGRES_PASSWORD=globber123 \
            -p 5432:5432 \
            postgres:16-alpine
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..15}; do
            if docker exec postgres_prod pg_isready -U globber > /dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "[$i] waiting for postgres..."
            sleep 2
          done

      - name: Redis Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
        run: |
          docker run -d --name redis_prod -p 6379:6379 redis:7.4-alpine
          sleep 5

      - name: Docker Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ (Spring Boot)
        run: |
          docker run -d --name myapp \
            --link redis_prod:redis_prod \
            --link postgres_prod:postgres_prod \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e SPRING_REDIS_HOST=redis_prod \
            -e SPRING_REDIS_PORT=6379 \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_prod:5432/globber \
            -e SPRING_DATASOURCE_USERNAME=globber \
            -e SPRING_DATASOURCE_PASSWORD=globber123 \
            myapp:test
          sleep 15

      - name: Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ìïë Ï≤¥ÌÅ¨
        run: |
          for i in {1..30}; do
            if curl -sf http://localhost:8080/actuator/health; then
              echo "App is healthy!"
              exit 0
            fi
            echo "[$i] waiting for app..."
            sleep 2
          done
          echo "App did not become healthy in time"
          docker logs myapp
          exit 1

      - name: Docker Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ¶¨
        if: always()
        run: |
          docker stop myapp
          docker rm myapp